//
// Created by Matthew Abbott on 19/2/22.
//

#ifndef CHESS_MOVECALCULATOR_H
#define CHESS_MOVECALCULATOR_H
#include <string>
#include <vector>
#include "Board.h"

class Node{
public:
    int x;
    int y;
    int squareRank;
    Node *next;
};

class LinkedList{

public:
    LinkedList(){
        head = nullptr;
    }

    virtual ~LinkedList();

    /**
     * Adds node to linked list used to store possible moves generated by MoveCalculator
     *
     * @param x Vertical axis or Numeric value for possible move <int>
     * @param y Horizontal axis or Alpha value for possible move <int>
     * @param squareRank Rank of square based on piece or its being empty <int>
     */
    void addNode(int x, int y, int squareRank);

    /**
     * returns a vector of moves from the linked list of possible moves generated by MoveCalculator
     *
     * @return returns vector containing x and y co-ordinates as integers <std::vector<int> >
     */
    std::vector<int> returnVector();

    /**
     * returns a vector of moves from the linked list of possible moves with square rank generated by MoveCalculator
     *
     * @return returns vector containing x, y co-ordinates and square rank as integers <std::vector<int> >
     */
    std::vector<int> returnWeightedVector();

private:
    Node* head;
};

class MoveCalculator{

public:
    MoveCalculator();

    /**
     * Check if king or left rook have been moved
     *
     * @param side Choose side to check 0 = Black 1 = White <int>
     * @return returns false if either king or left rook have been moved otherwise it returns true to allow castle <bool>
     */
    static bool castleCheck(int side);

    /**
     * Check if conditions are correct for enPassant move
     *
     * @param side Choose side to check 0 = Black 1 = White <int>
     * @return returns horizontal axis or alpha value for pawns destination <int>
     */
    static int enPassantCheck(int side);

    /**
     * Return a list of possible moves for piece found at x and y co ordinates on the board
     *
     * @param x Vertical or numeric axis of piece <int>
     * @param y Horizontal or alpha axis of piece <int>
     * @param moveBoard complete board for function to work on <Board>
     * @return returns pointer to list containing x, y positions and square rank <LinkedList*>
     */
    LinkedList *possibleSquares2DArray(int x, int y,Board moveBoard, int side);

    /**
     * Checks if piece found at co ordinates x and y given as parameters is under Check/Attack by another piece
     *
     * @param x Vertical or numeric axis of piece <int>
     * @param y Horizontal or alpha axis of piece <int>
     * @param moveBoard complete board for function to work on <Board>
     * @param side choose between black 0  and white 1 <int> 
     * @return true if location is under attack false if it is not <bool>
     */
    bool checkCalculator(int x,int y,Board moveBoard, int side);

    /**
     * Test if king is under attack or in check and then if by any move possible by the kings side can this be stopped
     *
     * @param moveBoard complete board for function to work on <Board>
     * @param side choose between black 0 and white 1 <int>
     * @return true if king is under attack and no possible move by his pieces will change this false otherwise <bool>
     */
    bool checkMateTest(Board moveBoard, int side);

    /**
     * Evaluate the piece found at input parameters x and y on Board moveBoard then return integer rank
     *
     * @param x Vertical of numeric axis of piece <int>
     * @param y Horizontal or alpha axis of piece <int>
     * @param moveBoard complete board for function to work on <Board>
     * @return square rank is returned as an integer from 0 to 10, 0 being empty and 10 containing a king <int>
     */
    static int evaluatePiece(int x, int y, Board moveBoard, int side);

private:
    int whiteKingX = 0;
    int blackKingY = 0;
    int swap[2] = { 1, 0 };
};

#endif //CHESS_MOVECALCULATOR_H
