//
// Created by Matthew Abbott on 19/2/22.
//

#ifndef CHESS_MOVECALCULATOR_H
#define CHESS_MOVECALCULATOR_H
#include <string>
#include <vector>
#include "Board.h"

class Node {
public:

    int x;
    int y;
    int squareRank;
    Node *next;

};

class LinkedList{

public:
    LinkedList() {
        head = NULL;
    }


    virtual ~LinkedList();

    /**
     * Adds node to linked list used to store possible moves generated by MoveCalculator
     *
     * @param x Vertical axis or Numeric value for possible move <int>
     * @param y Horizontal axis or Alpha value for possible move <int>
     * @param squareRank Rank of square based on piece or its being empty <int>
     */
    void addNode(int x, int y, int squareRank);

    /**
     * returns a vector of moves from the linked list of possible moves generated by MoveCalculator
     *
     * @return returns vector containing x and y co-ordinates as integers <std::vector<int> >
     */
    std::vector<int> returnVector();

    /**
     * returns a vector of moves from the linked list of possible moves with square rank generated by MoveCalculator
     *
     * @return returns vector containing x, y co-ordinates and square rank as integers <std::vector<int> >
     */
    std::vector<int> returnWeightedVector();

private:
    Node* head;

};


class MoveCalculator{

public:

    MoveCalculator();


    /**
     * Check if king or left rook have been moved
     *
     * @param side Choose side to check 0 = Black 1 = White <int>
     * @return returns false if either king or left rook have been moved otherwise it returns true to allow castle <bool>
     */
    static bool castleCheck(int side);

    /**
     * Check if conditions are correct for enPassant move
     *
     * @param side Choose side to check 0 = Black 1 = White <int>
     * @return returns horizontal axis or alpha value for pawns destination
     */
    static int enPassantCheck(int side);



    /**
     *
     * @param x
     * @param y
     * @param moveBoard
     * @return
     */
    LinkedList *possibleSquares2DArray(int x, int y,Board moveBoard);

    /**
     *
     * @param x
     * @param y
     * @param moveBoard
     * @param side
     * @return
     */
    bool checkCalculator(int x,int y,Board moveBoard, int side);

    /**
     *
     * @param moveBoard
     * @param side
     * @return
     */
    bool checkMateTest(Board moveBoard, int side);

    /**
     *
     * @param x
     * @param y
     * @param moveBoard
     * @return
     */
    int evaluatePiece(int x, int y, Board moveBoard);

private:
    int whiteKingX = 0;
    int whiteKingY = 0;
    int blackKingX = 0;
    int blackKingY = 0;


};


#endif //CHESS_MOVECALCULATOR_H
